{"version":3,"sources":["logo.png","index.js"],"names":["module","exports","crypto","require","PlayMenu","onClickPlay","input","document","getElementById","gameCode","value","props","connectGame","newGame","id","className","src","logo","alt","type","placeholder","onClick","this","React","Component","Field","fetch","method","headers","body","JSON","stringify","playerID","index","then","res","json","data","undefined","updateText","updateBoard","highlight","Game","board","Array","isArray","free","map","f","player1","playerWon","player","win","length","setState","fetchBoard","state","text","innerText","timerID","setInterval","clearInterval","val","idx","key","includes","App","randomBytes","toString","window","history","pushState","alert","updateRouting","location","pathname","startsWith","inGame","replace","createBrowserHistory","unlisten","listen","e","ReactDOM","render"],"mappings":"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","file":"static/js/main.0e75eae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cb82ab9f.png\";","import { createBrowserHistory } from 'history';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nimport './index.css';\nimport logo from './logo.png';\n\nconst crypto = require('crypto');\n\nfunction playerWon(board) {\n    // horizontal\n    if (board[0] === board[1] && board[1] === board[2]) {\n        return [board[1], [0, 1, 2]];\n    }\n    if (board[3] === board[4] && board[4] === board[5]) {\n        return [board[4], [3, 4, 5]];\n    }\n    if (board[6] === board[7] && board[7] === board[8]) {\n        return [board[7], [6, 7, 8]];\n    }\n    // vertical\n    if (board[0] === board[3] && board[3] === board[6]) {\n        return [board[3], [0, 3, 6]];\n    }\n    if (board[1] === board[4] && board[4] === board[7]) {\n        return [board[4], [1, 4, 7]];\n    }\n    if (board[2] === board[5] && board[5] === board[8]) {\n        return [board[5], [2, 5, 8]];\n    }\n    // diagonal\n    if (board[0] === board[4] && board[4] === board[8]) {\n        return [board[0], [0, 4, 8]];\n    }\n    if (board[2] === board[4] && board[4] === board[6]) {\n        return [board[4], [2, 4, 6]];\n    }\n    return [0, []];\n}\n\nclass PlayMenu extends React.Component {\n    onClickPlay = () => {\n        const input = document.getElementById('gcInput');\n        const gameCode = input.value;\n\n        if (gameCode === '') { \n            input.value = '';\n        } else {\n            this.props.connectGame(gameCode);\n        }\n    }\n\n    newGame = () => {\n        this.props.newGame();\n    }\n\n    render() {\n        return (\n            <div id='playMenu' className='centeredDiv'>\n                <img src={logo} alt=\"Logo\" />\n                <input id='gcInput' type='text' placeholder='enter game code'></input>\n                <br />\n                <button onClick={this.onClickPlay}>Connect</button>\n                <br />\n                <button onClick={this.newGame}>Create new Game</button>\n            </div>\n        )\n    }\n}\n\nclass Field extends React.Component {\n    onClick = () => {\n        fetch('http://localhost:3001/place', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({'playerID': this.props.playerID, 'gameCode': this.props.gameCode, 'index': this.props.index})\n        }).then(res => res.json()).then((data) => {\n            if (data['message'] !== undefined) {\n                this.props.updateText(data['message']);\n            } else {\n                this.props.updateBoard(data);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className='box'>\n                <button className={this.props.highlight ? 'field highlight' : 'field'} onClick={this.onClick}>{this.props.value == 0 ? '' : (this.props.value == 1 ? 'X' : 'O')}</button>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            board: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            win: [],\n            gameCode: props.gameCode\n        }\n    }\n\n    componentDidMount() {\n        this.fetchBoard();\n\n        this.timerID = setInterval(\n            () => this.fetchBoard(),\n            3000\n        )\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    updateBoard = (board) => {\n        if (!Array.isArray(board)) {\n            this.updateText('Waiting for Player 2 to connect..');\n        } else {\n            let free = 0;\n            // count empty spaces\n            board.map(f => {\n                if (f === 0) {\n                    free += 1;\n                }\n            });\n    \n            if ((free % 2 === 1 && this.props.player1) || (free % 2 === 0 && !this.props.player1)) {\n                this.updateText('It\\'s your turn!');\n            } else {\n                this.updateText('Waiting for opponent to move!');\n            }\n\n            const [player, win] = playerWon(board);\n\n            if (win.length !== 0 && player !== 0) {\n                this.updateText('Player ' + player + ' won!');\n            } else if (free === 0) {\n                this.updateText('Tie!');\n            }\n    \n            this.setState({\n                board: board,\n                win: win,\n            });\n        }\n    }\n\n    fetchBoard = () => {\n        fetch('http://localhost:3001/games/' + this.state.gameCode)\n            .then(res => res.json())\n            .then(data => {\n                this.updateBoard(data);\n            });\n    }\n\n    updateText = (text) => {\n        const tf = document.getElementById('message');\n        tf.innerText = text;\n    }\n\n    render() {\n        const board = this.state.board.map((val, idx) => \n            <Field key={idx} value={val} index={idx} playerID={this.props.playerID} highlight={this.state.win.includes(idx)}\n                gameCode={this.props.gameCode} updateText={this.updateText} updateBoard={this.updateBoard} />\n        );\n\n        return (\n            <div id='game' className='centeredDiv'>\n                <h1 id='message'>Waiting for Player 2 to connect..</h1>\n                {board}\n            </div>\n        )\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let history = createBrowserHistory();\n\n        this.unlisten = history.listen((e) => {\n            this.updateRouting(e.location);\n        })\n\n        this.state = {\n            gameCode: -1,\n        }\n    }\n\n    connectGame = (gameCode) => {\n        const playerID = crypto.randomBytes(8).toString('hex');\n\n        fetch('http://localhost:3001/connect', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({'playerID': playerID, 'gameCode': gameCode})\n        }).then(res => res.json()).then((data) => {\n            if (data['message'] !== undefined) {\n                alert(data['message']);\n                return;\n            }\n\n            this.setState({\n                gameCode: gameCode,\n                playerID: playerID,\n                player1: false,\n            })\n            window.history.pushState(null, '', '/game/' + gameCode.toString());\n        });\n    }\n\n    newGame = () => {\n        const playerID = crypto.randomBytes(8).toString('hex');\n\n        fetch('http://localhost:3001/new-game', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({'playerID': playerID})\n        }).then(res => res.json()).then((data) => {\n            if (data['message'] !== undefined) {\n                alert(data['message']);\n                return;\n            }\n\n            this.setState({\n                gameCode: data['gameCode'],\n                playerID: playerID,\n                player1: true,\n            });\n            window.history.pushState(null, '', '/game/' + data['gameCode']);\n        });\n    }\n\n    updateRouting = (location) => {\n        if (location.pathname.startsWith('/game/') && !this.state.inGame) {\n            const gameCode = location.pathname.replace('/game/', '');\n            \n            if (gameCode === '' || this.state.playerID === undefined) {\n                window.history.pushState(null, '', '/');\n                this.setState({\n                    gameCode: -1,\n                });\n            } else {\n                this.setState({\n                    gameCode: gameCode,\n                });\n            }\n        } else {\n            this.setState({\n                gameCode: -1,\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.updateRouting(window.location);\n    }\n\n    componentWillUnmount() {\n        this.unlisten();\n    }\n\n    render() {\n        return (\n            <div id='app'>\n                {this.state.gameCode === -1 ? \n                    <PlayMenu connectGame={this.connectGame} newGame={this.newGame}/> : \n                    <Game gameCode={this.state.gameCode} playerID={this.state.playerID} player1={this.state.player1}/>}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    (<App />),\n    document.getElementById('root')\n);"],"sourceRoot":""}